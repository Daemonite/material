// Because flex properties aren't inherited, we need to redeclare these first
// few properties so that content nested within behave properly.
%container-flex-properties {
  align-items: center;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
}

.navbar {
  @extend %container-flex-properties;

  color: $toolbar-color;
  min-height: $toolbar-height;
  padding: $toolbar-padding-y $toolbar-padding-x;
  position: relative;

  .container,
  .container-fluid {
    @extend %container-flex-properties;
  }

  // stylelint-disable
  @each $breakpoint,
  $container-max-width in $container-max-widths {
    >.container#{breakpoint-infix($breakpoint, $container-max-widths)} {
      @extend %container-flex-properties;
    }
  }

  // stylelint-enable

  // Vertically align some elements normally placed in `.navbar`

  .form-control {
    @include border-radius($toolbar-element-border-radius);
    @include transition-standard(opacity);

    background-color: $toolbar-element-bg;
    border: 0;
    color: inherit;
    opacity: $toolbar-element-opacity;
    padding: (($textfield-height - $textfield-font-size * $textfield-line-height) / 2) $toolbar-inner-spacer-x;

    @include hover-focus {
      box-shadow: none;
      opacity: 1;
    }
  }

  .form-control-lg {
    padding-top: (($textfield-height-lg - $textfield-font-size-lg * $textfield-line-height-lg) / 2);
    padding-bottom: (($textfield-height-lg - $textfield-font-size-lg * $textfield-line-height-lg) / 2);
  }

  .form-control-sm {
    padding-top: (($textfield-height-sm - $textfield-font-size-sm * $textfield-line-height-sm) / 2);
    padding-bottom: (($textfield-height-sm - $textfield-font-size-sm * $textfield-line-height-sm) / 2);
  }

  .input-group {
    @include border-radius($toolbar-element-border-radius);
    @include transition-standard(opacity);

    background-color: $toolbar-element-bg;
    opacity: $toolbar-element-opacity;

    @include hover-focus {
      opacity: 1;
    }

    .form-control {
      background-color: transparent;
      opacity: 1;

      &:not(:first-child) {
        padding-left: 0;
      }

      &:not(:last-child) {
        padding-right: 0;
      }
    }

    .input-group-append {
      margin-left: 0;
      min-width: 0;
    }

    .input-group-prepend {
      margin-right: 0;
      min-width: 0;
    }

    .input-group-text {
      margin-right: $toolbar-inner-spacer-x;
      margin-left: $toolbar-inner-spacer-x;
    }
  }

  .input-group-lg > .form-control {
    padding-top: (($textfield-height-lg - $textfield-font-size-lg * $textfield-line-height-lg) / 2);
    padding-bottom: (($textfield-height-lg - $textfield-font-size-lg * $textfield-line-height-lg) / 2);
  }

  .input-group-sm > .form-control {
    padding-top: (($textfield-height-sm - $textfield-font-size-sm * $textfield-line-height-sm) / 2);
    padding-bottom: (($textfield-height-sm - $textfield-font-size-sm * $textfield-line-height-sm) / 2);
  }

  .nav-tabs {
    margin-top: ($toolbar-padding-y * -1);
    margin-bottom: ($toolbar-padding-y * -1);

    .nav-link {
      min-height: $toolbar-height;
      padding-top: (($toolbar-height - $nav-tab-font-size * $nav-tab-line-height) / 2);
      padding-bottom: (($toolbar-height - $nav-tab-font-size * $nav-tab-line-height) / 2);
    }
  }
}

.navbar-dark {
  color: $toolbar-dark-color;

  .form-control,
  .input-group,
  .navbar-brand::before,
  .navbar-nav .show > .nav-link,
  .navbar-toggler::before {
    background-color: $toolbar-dark-element-bg;
  }

  .form-control::placeholder,
  .navbar-nav .nav-link.disabled {
    color: $toolbar-dark-color-lighter;
  }
}

.navbar-fixed-bottom,
.navbar-fixed-top {
  box-shadow: map-get($toolbar-elevation-shadow, shadow);
  position: fixed;
  right: 0;
  left: 0;
  z-index: map-get($toolbar-elevation-shadow, elevation);
}

.navbar-fixed-bottom {
  bottom: 0;
}

.navbar-fixed-top {
  top: 0;
}

.navbar-full {
  box-shadow: map-get($toolbar-elevation-shadow, shadow);
  z-index: map-get($toolbar-elevation-shadow, elevation);
}

.navbar-sticky-top {
  @supports (position: sticky) {
    box-shadow: map-get($toolbar-elevation-shadow, shadow);
    position: sticky;
    top: 0;
    z-index: map-get($toolbar-elevation-shadow, elevation);
  }
}

.toolbar-waterfall {
  @include transition-standard(background-color, box-shadow);

  position: absolute;
  top: 0;
  right: 0;
  left: 0;
  z-index: map-get($toolbar-elevation-shadow, elevation);

  &.waterfall {
    background-color: $toolbar-waterfall-bg;
    box-shadow: map-get($toolbar-elevation-shadow, shadow);
    position: fixed;
  }
}

// Misc

.navbar-brand {
  @include typography-headline-6;

  align-items: center;
  color: inherit;
  display: inline-flex; // inline-block
  height: $toolbar-element-height;
  position: relative;
  white-space: nowrap;

  @include hover-focus-active {
    color: inherit;
    text-decoration: none;
  }

  &::before {
    @include transition-standard(opacity);

    background-color: $toolbar-element-bg;
    content: '';
    display: block;
    opacity: 0;
    position: absolute;
    top: 0;
    right: ($toolbar-inner-spacer-x / -2);
    bottom: 0;
    left: ($toolbar-inner-spacer-x / -2);
  }

  &:focus {
    outline: 0;

    &::before {
      opacity: 1;
    }
  }

  &:not(:first-child) {
    margin-left: $toolbar-inner-spacer-x;
  }

  &:not(:last-child) {
    margin-right: $toolbar-inner-spacer-x;
  }
}

.navbar-text {
  align-items: center;
  color: inherit;
  display: inline-flex;
  flex-wrap: wrap;
  height: $toolbar-element-height;
}

// Nav

.navbar-nav {
  display: flex;
  flex-direction: column;
  list-style: none;
  margin-bottom: 0;
  padding-left: 0;

  .nav-link {
    @include border-radius($toolbar-element-border-radius);
    @include transition-standard(background-color, opacity);

    color: inherit;
    font-size: $toolbar-link-font-size;
    height: $toolbar-link-height;
    line-height: $toolbar-link-line-height;
    opacity: $toolbar-element-opacity;
    padding: $toolbar-link-padding-y $toolbar-link-padding-x;

    @include hover-focus-active {
      background-color: $toolbar-element-bg;
      opacity: 1;
    }

    &.active,
    &.disabled {
      opacity: 1;
    }

    &.disabled {
      background-color: transparent;
      color: $toolbar-color-lighter;
    }

    &:focus {
      outline: 0;
    }
  }

  .active > .nav-link,
  .show > .nav-link {
    opacity: 1;
  }

  .show > .nav-link {
    background-color: $toolbar-element-bg;
  }

  /* .dropdown-menu {
    position: static;
    float: none;
  } */
}

// Toggleable

.navbar-collapse {
  align-items: center;
  flex-basis: 100%;
  flex-grow: 1;
}

.navbar-expand {
  @each $breakpoint in map-keys($grid-breakpoints) {
    $next: breakpoint-next($breakpoint, $grid-breakpoints);
    $infix: breakpoint-infix($next, $grid-breakpoints);

    &#{$infix} {
      @include media-breakpoint-down($breakpoint) {
        %container-navbar-expand-#{$breakpoint} {
          padding-right: 0;
          padding-left: 0;
        }

        > .container,
        > .container-fluid {
          @extend %container-navbar-expand-#{$breakpoint};
        }

        // stylelint-disable
        @each $size,
        $container-max-width in $container-max-widths {
          >.container#{breakpoint-infix($size, $container-max-widths)} {
            @extend %container-navbar-expand-#{$breakpoint};
          }
        }

        // stylelint-enable
      }

      @include media-breakpoint-up($next) {
        flex-flow: row nowrap;
        justify-content: flex-start;

        .navbar-nav {
          flex-direction: row;

          .dropdown-menu {
            position: absolute;
          }

          .nav-link {
            padding-right: $toolbar-link-padding-x;
            padding-left: $toolbar-link-padding-x;
          }
        }

        // For nesting containers, have to redeclare for alignment purposes
        %container-nesting-#{$breakpoint} {
          flex-wrap: nowrap;
        }

        > .container,
        > .container-fluid {
          @extend %container-nesting-#{$breakpoint};
        }

        // stylelint-disable
        @each $size,
        $container-max-width in $container-max-widths {
          >.container#{breakpoint-infix($size, $container-max-widths)} {
            @extend %container-nesting-#{$breakpoint};
          }
        }

        // stylelint-enable

        // stylelint-disable
        .navbar-collapse {
          display: flex !important;
          // Changes flex-bases to auto because of an IE10 bug
          flex-basis: auto;
        }

        // stylelint-enable

        .navbar-toggler {
          display: none;
        }
      }
    }
  }
}

.navbar-toggler {
  align-items: center;
  background-color: transparent;
  border: 0;
  border-radius: 50%;
  color: inherit;
  display: inline-flex;
  flex-shrink: 0;
  height: $toolbar-element-height;
  justify-content: center;
  line-height: 1;
  padding: 0;
  position: relative;
  width: $toolbar-element-height;

  @include hover-focus {
    color: inherit;
    text-decoration: none;

    &::before {
      opacity: 1;
    }
  }

  &::before {
    @include transition-standard(opacity);

    background-color: $toolbar-element-bg;
    border-radius: 50%;
    content: '';
    display: block;
    opacity: 0;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
  }

  &:focus {
    outline: 0;
  }

  &:not(:disabled):not(.disabled) {
    cursor: pointer;
  }
}

.navbar-toggler-icon {
  @include set-material-icons;

  /* display: inline-block;
  width: 1.5em;
  height: 1.5em;
  vertical-align: middle;
  content: "";
  background: no-repeat center center;
  background-size: 100% 100%; */

  display: inline-block;

  &::before {
    content: $toolbar-toggler-icon;
  }
}

// Dark links against a light background
// todo

/* .navbar-light {
  .navbar-brand {
    color: $navbar-light-brand-color;

    @include hover-focus {
      color: $navbar-light-brand-hover-color;
    }
  }

  .navbar-nav {
    .nav-link {
      color: $navbar-light-color;

      @include hover-focus {
        color: $navbar-light-hover-color;
      }

      &.disabled {
        color: $navbar-light-disabled-color;
      }
    }

    .show > .nav-link,
    .active > .nav-link,
    .nav-link.show,
    .nav-link.active {
      color: $navbar-light-active-color;
    }
  }

  .navbar-toggler {
    color: $navbar-light-color;
    border-color: $navbar-light-toggler-border-color;
  }

  .navbar-toggler-icon {
    background-image: $navbar-light-toggler-icon-bg;
  }

  .navbar-text {
    color: $navbar-light-color;
    a {
      color: $navbar-light-active-color;

      @include hover-focus {
        color: $navbar-light-active-color;
      }
    }
  }
}

// White links against a dark background
.navbar-dark {
  .navbar-brand {
    color: $navbar-dark-brand-color;

    @include hover-focus {
      color: $navbar-dark-brand-hover-color;
    }
  }

  .navbar-nav {
    .nav-link {
      color: $navbar-dark-color;

      @include hover-focus {
        color: $navbar-dark-hover-color;
      }

      &.disabled {
        color: $navbar-dark-disabled-color;
      }
    }

    .show > .nav-link,
    .active > .nav-link,
    .nav-link.show,
    .nav-link.active {
      color: $navbar-dark-active-color;
    }
  }

  .navbar-toggler {
    color: $navbar-dark-color;
    border-color: $navbar-dark-toggler-border-color;
  }

  .navbar-toggler-icon {
    background-image: $navbar-dark-toggler-icon-bg;
  }

  .navbar-text {
    color: $navbar-dark-color;
    a {
      color: $navbar-dark-active-color;

      @include hover-focus {
        color: $navbar-dark-active-color;
      }
    }
  }
} */
