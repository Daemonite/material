// Checkboxes and radios
//
// Base class takes care of all the key behavioral aspects.

.custom-control {
  display: block;
  min-height: $font-size-base * $line-height-base;
  padding-left: $selection-control-spacer-x + $selection-control-indicator-size;
  position: relative;

  +.custom-control {
    margin-top: $selection-control-spacer-y;
  }
}

.custom-control-inline {
  display: inline-flex;
  margin-right: $selection-control-spacer-x * 2; //$custom-control-spacer-x

  +.custom-control-inline {
    margin-top: 0;
  }
}

// Base styles for custom control indicators

.custom-control-label {
  color: inherit;
  font-size: $font-size-base;
  line-height: inherit;
  margin-bottom: 0;
  //position: relative;
  user-select: none; // djibe addition
  vertical-align: top;

  // Background-color and (when enabled) gradient
  &::before {
    @include transition-standard(background-color, opacity, transform);

    background-color: currentColor;
    border-radius: 50%;
    color: $selection-control-color;
    content: '';
    display: block;
    height: ($selection-control-indicator-size * 2);
    margin-top: (($font-size-base * $line-height-base - $selection-control-indicator-size) / 2 + $selection-control-indicator-size / -2);
    margin-left: ($selection-control-indicator-size / -2);
    opacity: 0;
    position: absolute;
    top: 0;
    left: 0;
    transform: scale(.87, .87) translateZ(0);
    width: ($selection-control-indicator-size * 2);
  }

  // Foreground (icon)
  &::after {
    color: $selection-control-color;
    display: block;
    position: absolute;
    top: (($font-size-base * $line-height-base - $selection-control-indicator-size) / 2);
    left: 0;
  }
}

.custom-control-input {
  opacity: 0;
  position: absolute;
  z-index: -1;

  &:not([disabled]):hover {
    ~.custom-control-label {
      cursor: pointer; // djibe addition
    }
  }

  &.focus,
  &:active {
    ~.custom-control-label::before {
      opacity: $selection-control-radial-opacity;
      transform: scale(1, 1) translateZ(0);
    }
  }

  &:checked~ {
    .custom-control-label {
      &::after {
        color: $selection-control-color-active;
      }

      &::before {
        background-color: $selection-control-color-active;
      }
    }
  }

  &:disabled~ {
    .custom-control-label {
      color: $selection-control-color-disabled;

      &::after {
        color: $selection-control-color-disabled;
      }

      &::before {
        display: none;
      }
    }
  }
}

// Checkboxes
//
// Tweak just a few things for checkboxes.

.custom-checkbox {
  .custom-control-label::after {
    @include set-material-icons;

    content: $selection-control-checkbox-icon;
    line-height: 1;
    vertical-align: middle;
  }

  .custom-control-input {
    &:checked~.custom-control-label::after {
      content: $selection-control-checkbox-icon-checked;
    }

    &:indeterminate~.custom-control-label::after {
      content: $selection-control-checkbox-icon-indeterminate;
    }
  }
}

// Radio button

.custom-radio {
  .custom-control-label::after {
    @include set-material-icons;

    content: $selection-control-radio-icon;
    line-height: 1;
    vertical-align: middle;
  }

  .custom-control-input:checked~.custom-control-label {
    &::after {
      content: $selection-control-radio-icon-checked;
      // background-image: $custom-radio-indicator-icon-checked;
    }
  }
}

// switches
//
// Tweak a few things for switches

.custom-switch {
  padding-left: $custom-switch-width + $custom-control-gutter;

  .custom-control-label {
    &::before {
      left: -($custom-switch-width + $custom-control-gutter);
      width: $custom-switch-width;
      pointer-events: all;
      // stylelint-disable-next-line property-blacklist
      border-radius: $custom-switch-indicator-border-radius;
    }

    &::after {
      top: calc(#{(($font-size-base * $line-height-base - $custom-control-indicator-size) / 2)} + #{$custom-control-indicator-border-width * 2});
      left: calc(#{-($custom-switch-width + $custom-control-gutter)} + #{$custom-control-indicator-border-width * 2});
      width: $custom-switch-indicator-size;
      height: $custom-switch-indicator-size;
      background-color: $custom-control-indicator-border-color;
      // stylelint-disable-next-line property-blacklist
      border-radius: $custom-switch-indicator-border-radius;
      transition: transform .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out;
    }
  }

  .custom-control-input:checked ~ .custom-control-label {
    &::after {
      background-color: $custom-control-indicator-bg;
      transform: translateX($custom-switch-width - $custom-control-indicator-size);
    }
  }

  .custom-control-input:disabled {
    &:checked ~ .custom-control-label::before {
      background-color: $custom-control-indicator-checked-disabled-bg;
    }
  }
}
