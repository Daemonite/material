// Checkboxes and radios
//
// Base class takes care of all the key behavioral aspects.

.custom-control {
  display: block;
  min-height: $font-size-base * $line-height-base;
  padding-left: $selection-control-spacer-x + $selection-control-indicator-size;
  position: relative;

  + .custom-control {
    margin-top: $selection-control-spacer-y;
  }
}

.custom-control-inline {
  display: inline-flex;
  margin-right: $selection-control-spacer-x * 2; //$custom-control-spacer-x

  + .custom-control-inline {
    margin-top: 0;
  }
}

// Base styles for custom control indicators

.custom-control-label {
  color: inherit;
  font-size: $font-size-body-2; //$font-size-base;
  letter-spacing: $letter-spacing-body-2;
  line-height: $line-height-body-2;
  margin-bottom: 0;
  //position: relative;
  user-select: none; // djibe addition
  vertical-align: top;

  // Background-color and (when enabled) gradient
  &::before {
    @include transition-control(background-color, opacity, transform);

    background-color: currentColor;
    border-radius: 50%;
    color: $selection-control-color;
    content: '';
    display: block;
    height: ($selection-control-indicator-size * 2);
    margin-top: (($font-size-base * $line-height-base - $selection-control-indicator-size) / 2 + $selection-control-indicator-size / -2);
    margin-left: ($selection-control-indicator-size / -2);
    opacity: 0;
    position: absolute;
    top: 0;
    left: 0;
    transform: scale(0.87, 0.87) translateZ(0);
    width: ($selection-control-indicator-size * 2);
  }

  // Foreground (icon)
  &::after {
    color: $selection-control-color;
    display: block;
    position: absolute;
    top: (($font-size-base * $line-height-base - $selection-control-indicator-size) / 2);
    left: 0;
  }
}

.custom-control-input {
  height: ($font-size-base * $line-height-base + $custom-control-indicator-size) / 2;
  opacity: 0;
  position: absolute;
  left: 0; // https://github.com/twbs/bootstrap/commit/b165aff2f779c831efd8b3484e3ea7bc1c8f8eb4
  width: $custom-control-indicator-size;
  z-index: -1;

  &[disabled] {
    ~ .custom-control-label {
      color: $selection-control-color-disabled;

      &::after {
        color: $selection-control-color-disabled;
      }

      &::before {
        display: none;
      }
    }
  }

  &:not([disabled]):hover {
    ~ .custom-control-label {
      cursor: pointer; // djibe addition
    }
  }

  &:active,
  &.focus {
    ~ .custom-control-label::before {
      opacity: $selection-control-radial-opacity;
      transform: scale(1, 1) translateZ(0);
    }
  }

  &:checked ~ {
    .custom-control-label {
      &::after {
        color: $selection-control-color-active;
      }

      &::before {
        background-color: $selection-control-color-active;
      }
    }
  }
}

// Checkboxes
//
// Tweak just a few things for checkboxes.

.custom-checkbox {
  &.custom-control {
    align-items: center;
    display: flex;
  }

  .custom-control-label::after {
    @include set-material-icons;

    content: $selection-control-checkbox-icon;
    line-height: 1;
    vertical-align: middle;
  }

  .custom-control-input {
    &:checked ~ .custom-control-label::after {
      content: $selection-control-checkbox-icon-checked;
    }

    &:indeterminate ~ .custom-control-label::after {
      content: $selection-control-checkbox-icon-indeterminate;
    }

    &:indeterminate:not([disabled]) ~ .custom-control-label::after {
      color: $selection-control-color-active;
    }
  }
}

// Radio button

.custom-radio {
  .custom-control-label::after {
    @include set-material-icons;

    content: $selection-control-radio-icon;
    line-height: 1;
    vertical-align: middle;
  }

  .custom-control-input:checked ~ .custom-control-label {
    &::after {
      content: $selection-control-radio-icon-checked;
      // background-image: $custom-radio-indicator-icon-checked;
    }
  }
}

// switches
//
// Tweak a few things for switches
.custom-switch {
  display: inline-block;
  padding-left: ($selection-control-track-width + $selection-control-spacer-x);

  .custom-control-label {
    @include transition-standard(background-color);

    &::after {
      @include transition-standard(background-color, transform);

      background-color: $selection-control-thumb-bg;
      border-radius: 50%;
      box-shadow: $selection-control-thumb-shadow;
      content: '';
      display: block;
      height: $selection-control-indicator-size;
      position: absolute;
      width: $selection-control-indicator-size;
    }
  }

  .custom-control-input {
    &:checked {
      ~ .custom-control-label {
        // scss-lint:disable NestingDepth
        &::after,
        &::before {
          transform: translateX($selection-control-track-width - $selection-control-indicator-size);
        }

        &::after {
          background-color: $selection-control-color-active;
        }
        // scss-lint:enable
      }

      ~ .custom-control-track {
        background-color: rgba($selection-control-color-active, $selection-control-track-opacity);
      }
    }

    &:disabled {
      ~ .custom-control-label::after {
        background-color: $selection-control-thumb-bg-disabled;
      }

      ~ .custom-control-track {
        background-color: $selection-control-track-bg-disabled;
      }
    }
  }

  .custom-control-track {
    @include transition-standard(background-color);

    background-clip: content-box;
    background-color: $selection-control-track-bg;
    border: (($selection-control-indicator-size - $selection-control-track-height) / 2) solid transparent;
    border-radius: $selection-control-track-height;
    content: '';
    display: block;
    height: $selection-control-indicator-size;
    position: absolute;
    top: (($font-size-base * $line-height-base - $selection-control-indicator-size) / 2);
    left: 0;
    width: $selection-control-track-width;
  }
}

/* .custom-switch {
  padding-left: $custom-switch-width + $custom-control-gutter;

  .custom-control-label {
    &::before {
      left: -($custom-switch-width + $custom-control-gutter);
      width: $custom-switch-width;
      pointer-events: all;
      border-radius: $custom-switch-indicator-border-radius;
    }

    &::after {
      top: calc(#{(($font-size-base * $line-height-base - $custom-control-indicator-size) / 2)} + #{$custom-control-indicator-border-width * 2});
      left: calc(#{-($custom-switch-width + $custom-control-gutter)} + #{$custom-control-indicator-border-width * 2});
      width: $custom-switch-indicator-size;
      height: $custom-switch-indicator-size;
      background-color: $custom-control-indicator-border-color;
      border-radius: $custom-switch-indicator-border-radius;
      transition: transform .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out;
    }
  }

  .custom-control-input:checked ~ .custom-control-label {
    &::after {
      background-color: $custom-control-indicator-bg;
      transform: translateX($custom-switch-width - $custom-control-indicator-size);
    }
  }

  .custom-control-input:disabled {
    &:checked ~ .custom-control-label::before {
      background-color: $custom-control-indicator-checked-disabled-bg;
    }
  }
} */
